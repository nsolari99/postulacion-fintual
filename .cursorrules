## Build a FastAPI Portfolio Tracker with Annualized Return

**Goal:**

Create an HTTP API using **FastAPI** to track the value of a stock portfolio over time and compute profit and annualized return.

Requirements

### 1. **Portfolio Creation Endpoint**

- **Endpoint**: POST /portfolio
- **Request body**:

{
  "name": "My Portfolio",
  "holdings": [
    {"symbol": "AAPL", "quantity": 10},
    {"symbol": "MSFT", "quantity": 5}
  ]
}


- **Functionality**:
    - Save portfolio to SQLite with name and a list of holdings (ticker + quantity).
    - Each portfolio must be assigned a unique ID.

### 2. **Profit Calculation Endpoint**

- **Endpoint**: GET /portfolio/{portfolio_id}/profit
- **Query Parameters**:
    - start_date (format: YYYY-MM-DD)
    - end_date (format: YYYY-MM-DD)
- **Functionality**:
    - For each stock in the portfolio:
        - Use yfinance to fetch **adjusted close prices** on start_date and end_date.
        - If price is missing (e.g., non-trading day), find the closest previous valid trading day.
    - Store the fetched prices in SQLite to avoid duplicate downloads.
    - Calculate:
        - **Start value** = sum of (price at start_date × quantity)
        - **End value** = sum of (price at end_date × quantity)
        - **Profit** = end_value - start_value
        - **Annualized Return**: ar = ((end value / start value) ^(365/Days between) ) - 1
    - Response:
    
    
{
      "portfolio_id": 1,
      "start_value": 1500.0,
      "end_value": 1800.0,
      "profit": 300.0,
      "annualized_return": 0.1847
    }

    

### **Data Storage**

- Use **SQLite** to persist:
    - Portfolios (ID, name)
    - Holdings (portfolio ID, ticker, quantity)
    - Fetched stock prices (symbol, date, adjusted_close)

### **Other Requirements**

- Use yfinance to get prices (only **adjusted close**).
- Support all tickers available through yfinance.
- Gracefully handle:
    - Unsupported tickers
    - Missing prices (e.g., on weekends)
- No authentication is required.

# FastAPI Portfolio Tracker - Project Extension Guide

## Completed Features
✅ Portfolio creation endpoint (POST /portfolio)
✅ Profit calculation endpoint (GET /portfolio/{id}/profit)
✅ SQLite database with proper models
✅ Price fetching and caching
✅ Annualized return calculation

## Next Steps and Extensions

### 1. Additional Endpoints
- **GET /portfolio** - List all portfolios
- **GET /portfolio/{id}** - Get portfolio details
- **PUT /portfolio/{id}** - Update portfolio
- **DELETE /portfolio/{id}** - Delete portfolio
- **GET /portfolio/{id}/holdings** - Get portfolio holdings
- **POST /portfolio/{id}/holdings** - Add holdings to portfolio
- **DELETE /portfolio/{id}/holdings/{holding_id}** - Remove holding

### 2. Authentication
- Add user authentication (OAuth2 with JWT)
- Associate portfolios with users
- Role-based access control

### 3. Enhanced Features
- Add support for portfolio rebalancing
- Calculate portfolio metrics (volatility, Sharpe ratio)
- Add historical tracking of portfolio performance
- Support for different currencies
- Support for different asset types (bonds, crypto)

### 4. Testing
- Unit tests for models and helpers
- Integration tests for endpoints
- Test coverage reporting

### 5. Performance Optimizations
- Implement request caching for frequently accessed data
- Add database indexes for common queries
- Implement pagination for listing endpoints

### 6. Deployment
- Docker containerization
- CI/CD pipeline setup
- Environment-specific configuration

### 7. Documentation
- Enhance API documentation with more examples
- Add architecture diagrams
- Create developer guide

### 8. Frontend
- Create a React/Vue/Angular frontend
- Implement portfolio visualization with charts
- Add responsive design for mobile

## Current Project Structure
- `main.py`: Database configuration and app entry point
- `models.py`: SQLAlchemy database models
- `schemas.py`: Pydantic models for request/response validation
- `helpers.py`: Utility functions for price fetching and calculations
- `router.py`: FastAPI route handlers
- `README.md`: Project documentation